{"version":3,"file":"static/js/929.174398a4.chunk.js","mappings":"2IACA,QAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,uBCGjN,MAQA,EARoBA,IAEZC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAe,IAAMA,EAAaC,UAC9CH,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CAACC,GAAI,YAAcN,EAAMO,GAAGH,SAAEJ,EAAMQ,SCMxD,EATqBR,IAEbC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAcC,SACzBJ,EAAMS,U,4CCEnB,MAoDMC,GAAsBC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,wBAAlBD,EAtBJX,IACpB,IAAIa,GAAcC,EAAAA,EAAAA,GAAiB,IACnC,OACIb,EAAAA,EAAAA,KAAA,QAAMc,SAAUf,EAAMgB,aAAaZ,UAC/Ba,EAAAA,EAAAA,MAAA,OAAAb,SAAA,EACIH,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CACFC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,EAAeT,GAC1BL,KAAM,iBACNe,YAAY,0BAIpBtB,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAAA,UAAAG,SAAS,eAGd,IAMf,EAtDiBJ,IAEb,IAAIwB,EAAQxB,EAAMyB,aAEdC,EAAkBF,EAAMG,YAAYC,KAAIC,IAAU5B,EAAAA,EAAAA,KAAC6B,EAAU,CAACtB,KAAMqB,EAAOrB,KAAMD,GAAIsB,EAAOtB,OAC5FwB,EAAmBP,EAAMQ,aAAaJ,KAAIK,IAAKhC,EAAAA,EAAAA,KAACiC,EAAW,CAACzB,QAASwB,EAAExB,YACtDe,EAAMW,eAU3B,OACIlB,EAAAA,EAAAA,MAAA,OAAKf,UAAWC,EAAcC,SAAA,EAC1BH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAmBC,SAC9BsB,KAELT,EAAAA,EAAAA,MAAA,OAAKf,UAAWC,EAAeC,SAAA,EAC3BH,EAAAA,EAAAA,KAAA,OAAAG,SAAM2B,KACN9B,EAAAA,EAAAA,KAACS,EAAmB,CAAEK,SAdXqB,IACnBpC,EAAMqC,YAAYD,EAAOD,eAAe,SAelC,E,kCCxBd,MAcA,GAAeG,E,QAAAA,KACXC,EAAAA,EAAAA,KAfqBf,IACf,CACFC,aAAcD,EAAMC,iBAIAe,IAClB,CACFH,YAAcF,IACVK,GAASC,EAAAA,EAAAA,GAAyBN,GAAgB,MAO1DO,EAAAA,EAFJ,CAGEC,E","sources":["webpack://kamasutra/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/MessageItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__h-Rq0\",\"dialogsItems\":\"Dialogs_dialogsItems__0eKSj\",\"dialog\":\"Dialogs_dialog__M1Xa-\",\"active\":\"Dialogs_active__aZQR5\",\"messages\":\"Dialogs_messages__iW9Ip\",\"message\":\"Dialogs_message__8F7a7\"};","import React from \"react\";\r\nimport style from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={style.dialog + ' ' + style.active}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport style from \"./../Dialogs.module.css\";\r\n\r\n\r\nconst MessageItem = (props) => {\r\n    return (\r\n        <div className={style.message}>\r\n            {props.message}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default MessageItem;","import React from \"react\";\r\nimport style from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport MessageItem from \"./Message/MessageItem\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, requiredField } from \"../../utils/validators/validator\";\r\nimport { Textarea } from \"../../components/common/FormControls\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n    \r\n    let state = props.messagesPage\r\n\r\n    let dialogsElements = state.dialogsData.map(dialog => <DialogItem name={dialog.name} id={dialog.id} />);\r\n    let messagesElements = state.messagesData.map(m => <MessageItem message={m.message} />);\r\n    let newMessageBody = state.newMessageBody\r\n\r\n\r\n    const addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    \r\n   \r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={style.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux  onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nconst addMessageForm = (props) => {\r\n    let maxLength50 = maxLengthCreator(50)\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                    <Field\r\n                        component={Textarea}\r\n                        validate={[requiredField, maxLength50]}\r\n                        name={'newMessageBody'}\r\n                        placeholder=\"Enter your message\"\r\n                    >\r\n                    </Field>\r\n                </div>\r\n                <div>\r\n                    <button >Send</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(addMessageForm)\r\n\r\nexport default Dialogs;","\r\nimport Dialogs from \"./Dialogs\";\r\nimport { sendMessageActionCreator } from \"../../reducers/dialogsReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport withAuthRedirect from \"../../HOC/withAuthRedirect\"\r\nimport { compose } from \"redux\";\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        messagesPage: state.messagesPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n//прочитать про compose, нихуя не понял\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n//сверху тоже самое снизу\r\n\r\n// let AuthRiderectComponent = withAuthRedirect(Dialogs)\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRiderectComponent)\r\n\r\n// export default DialogsContainer;"],"names":["props","_jsx","className","style","children","NavLink","to","id","name","message","AddMessageFormRedux","reduxForm","form","maxLength50","maxLengthCreator","onSubmit","handleSubmit","_jsxs","Field","component","Textarea","validate","requiredField","placeholder","state","messagesPage","dialogsElements","dialogsData","map","dialog","DialogItem","messagesElements","messagesData","m","MessageItem","newMessageBody","values","sendMessage","compose","connect","dispatch","sendMessageActionCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}